add_custom_target(ceammc_generate_math
    COMMAND ${CMAKE_SOURCE_DIR}/ceammc/py/generate_math.py
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

set(MATH_SOURCES "")
macro(ceammc_math_extension name)
    list(APPEND MATH_SOURCES "math_${name}.c")
endmacro()

macro(ceammc_mathxx_extension name)
    list(APPEND MATH_SOURCES "math_${name}.cpp")
endmacro()

list(APPEND MATH_SOURCES math_bool_op.cpp)

# begin autogenerated
ceammc_math_extension(abs)
ceammc_math_extension(acos)
ceammc_math_extension(acosh)
ceammc_math_extension(asin)
ceammc_math_extension(asinh)
ceammc_math_extension(atan)
ceammc_math_extension(atanh)
ceammc_math_extension(cbrt)
ceammc_math_extension(ceil)
ceammc_math_extension(cos)
ceammc_math_extension(cosh)
ceammc_math_extension(exp)
ceammc_math_extension(exp2)
ceammc_math_extension(floor)
ceammc_math_extension(log)
ceammc_math_extension(log10)
ceammc_math_extension(log2)
ceammc_math_extension(round)
ceammc_math_extension(sin)
ceammc_math_extension(sinh)
ceammc_math_extension(sqrt)
ceammc_math_extension(tan)
ceammc_math_extension(tanh)
ceammc_math_extension(trunc)
# end autogenerated

ceammc_math_extension(pi)
ceammc_math_extension(e)
ceammc_math_extension(nan)
ceammc_math_extension(inf)
ceammc_math_extension(reciprocal)
ceammc_math_extension(sign)
ceammc_math_extension(neg)
ceammc_math_extension(squared)
ceammc_mathxx_extension(approx)

ceammc_mathxx_extension(and)
ceammc_mathxx_extension(or)
ceammc_mathxx_extension(prime)

add_library(ceammc_math STATIC mod_math.h mod_math.cpp ${MATH_SOURCES})
if(UNIX)
    set_target_properties(ceammc_math PROPERTIES COMPILE_FLAGS "-fPIC")
endif()
