include_directories(${CMAKE_SOURCE_DIR}/src)
set(LIST_SOURCES "")
macro(ceammc_list_extension name)
    list(APPEND LIST_SOURCES "list_${name}.cpp")
endmacro()

ceammc_list_extension(at)
ceammc_list_extension(apply_to)
ceammc_list_extension(choice)
ceammc_list_extension(count)
ceammc_list_extension(count_if)
ceammc_list_extension(delta)
ceammc_list_extension(distribution)
ceammc_list_extension(each)
ceammc_list_extension(equal)
ceammc_list_extension(first)
ceammc_list_extension(gen)
ceammc_list_extension(last)
ceammc_list_extension(length)
ceammc_list_extension(max)
ceammc_list_extension(mean)
ceammc_list_extension(min)
ceammc_list_extension(normalize)
ceammc_list_extension(product)
ceammc_list_extension(range)
ceammc_list_extension(reduce)
ceammc_list_extension(repeat)
ceammc_list_extension(resize)
ceammc_list_extension(reverse)
ceammc_list_extension(rotate)
ceammc_list_extension(seq)
ceammc_list_extension(shuffle)
ceammc_list_extension(sort)
ceammc_list_extension(sort_with)
ceammc_list_extension(sum)
ceammc_list_extension(unique)
ceammc_list_extension(walk)
ceammc_list_extension(zip)

ceammc_list_extension(integrator)
ceammc_list_extension(stretch)
ceammc_list_extension(shift)

ceammc_list_extension(unwrap)
ceammc_list_extension(wrap)

ceammc_list_extension(interleave)
ceammc_list_extension(deinterleave)
ceammc_list_extension(split)

ceammc_list_extension(repack)
ceammc_list_extension(unpack)

add_library(ceammc_list STATIC mod_list.h mod_list.cpp ${LIST_SOURCES})
if(UNIX)
    set_target_properties(ceammc_list PROPERTIES COMPILE_FLAGS "-fPIC")
endif()
