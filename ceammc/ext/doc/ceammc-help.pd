#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio. ;
#X obj 20 101 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 conv.sec2str;
#X text 175 153 converts float time in seconds to formated symbol;
#X obj 30 180 conv.str2sec;
#X text 175 180 converts formatted time to float value in seconds;
#X obj 20 207 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933 0;
#X obj 20 248 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 259 data.fifo;
#X text 175 259 First-In-First-Out (FIFO) queue data container;
#X obj 30 286 data.list;
#X text 175 286 list container;
#X obj 20 313 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 354 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 365 dyn.comp2~;
#X text 175 365 stereo dynamic range compressor;
#X obj 30 392 dyn.comp~;
#X text 175 392 mono dynamic range compressors;
#X obj 30 419 dyn.gate2~;
#X text 175 419 stereo signal gate;
#X obj 30 446 dyn.gate~;
#X text 175 446 mono signal gate;
#X obj 30 473 dyn.limit2~;
#X text 175 473 stereo 1176LN Peak Limiter;
#X obj 30 500 dyn.limit~;
#X text 175 500 mono 1176LN Peak Limiter;
#X obj 30 527 dyn.softclip~;
#X text 175 527 soft signal clip;
#X obj 20 554 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 595 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 606 env.adsr~;
#X text 175 606 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 633 env.ar~;
#X text 175 633 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 670 env.follow~;
#X text 175 670 Envelope follower with independent attack and release
times.;
#X obj 20 707 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933 0;
#X obj 20 748 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 759 expand_env;
#X text 175 759 Substitute enviroment variables in data stream;
#X obj 30 786 replace;
#X text 175 786 Replace atoms in data stream;
#X obj 20 813 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 854 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 865 flt.biquad~;
#X text 175 865 second order IIR filter.;
#X obj 30 892 flt.bpf12~;
#X text 175 892 Band-pass filter with 12/db per octave slope;
#X obj 30 919 flt.bpf24~;
#X text 175 919 Band-pass filter with 24/db per octave slope;
#X obj 30 946 flt.c_bpf~;
#X text 175 946 BPF coefficent calculator for biquad filter;
#X obj 30 973 flt.c_highshelf~;
#X text 175 973 Highshelf filter coefficent calculator for biquad;
#X obj 30 1000 flt.c_hpf~;
#X text 175 1000 HPF coefficent calculator for biquad filter;
#X obj 30 1027 flt.c_lowshelf~;
#X text 175 1027 Lowshelf filter coefficent calculator for biquad;
#X obj 30 1054 flt.c_lpf~;
#X text 175 1054 LPF coefficent calculator for biquad filter;
#X obj 30 1081 flt.c_notch~;
#X text 175 1081 Band-reject coefficent calculator for biquad filter;
#X obj 30 1108 flt.c_peak~;
#X text 175 1108 Peaking equalizer calculator for biquad.;
#X obj 30 1135 flt.dcblock2~;
#X text 175 1135 stereo DC blocker;
#X obj 30 1162 flt.dcblock~;
#X text 175 1162 mono DC blocker;
#X obj 30 1189 flt.eq_peak~;
#X text 175 1189 second order "peaking equalizer" section (gain boost
or cut near some frequency).  Also called a "parametric equalizer"
section.;
#X obj 30 1240 flt.highshelf~;
#X text 175 1240 gain boost|cut above some frequency;
#X obj 30 1267 flt.hpf12~;
#X text 175 1267 High-pass filter with 12/db per octave slope;
#X obj 30 1294 flt.hpf24~;
#X text 175 1294 High-pass filter with 24/db per octave slope;
#X obj 30 1321 flt.lowshelf~;
#X text 175 1321 gain boost|cut below some frequency;
#X obj 30 1348 flt.lpf12~;
#X text 175 1348 Low-pass filter with 12/db per octave slope;
#X obj 30 1375 flt.lpf24~;
#X text 175 1375 Low-pass filter with 24/db per octave slope;
#X obj 30 1402 flt.notch~;
#X text 175 1402 band-rejection filter;
#X obj 30 1429 flt.resonbp~;
#X text 175 1429 Simple resonant bandpass filter;
#X obj 20 1456 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 1497 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1508 fx.distortion~;
#X text 175 1508 cubic nonlinearity distortion;
#X obj 30 1535 fx.flanger~;
#X text 175 1535 mono flanging effect;
#X obj 30 1562 fx.freeverb2~;
#X text 175 1562 freeverb2 - stereo version of freeverb;
#X obj 30 1589 fx.freeverb~;
#X text 175 1589 freeverb - common used open-source reverb;
#X obj 30 1616 fx.freqshift~;
#X text 175 1616 frequency shifter or single-sideband ring modulation;
#X obj 30 1643 fx.pitchshift~;
#X text 175 1643 simple pitch shifter based on 2 delay lines;
#X obj 30 1670 fx.zita_rev1~;
#X text 175 1670 Zita stereo reverb;
#X obj 20 1697 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 1738 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1749 global.float;
#X text 175 1749 global named float object;
#X obj 30 1776 global.int;
#X text 175 1776 global named integer object;
#X obj 30 1803 global.list;
#X text 175 1803 global named list object;
#X obj 20 1830 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 1871 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1882 lfo.impulse~;
#X text 175 1882 Unit-amplitude low-frequency impulse train;
#X obj 30 1909 lfo.square~;
#X text 175 1909 Positive low frequence square wave;
#X obj 30 1936 lfo.tri~;
#X text 175 1936 Positive unit-amplitude low frequency triangle wave;
#X obj 20 1963 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 2004 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2015 list.apply_to;
#X text 175 2015 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 2052 list.at;
#X text 175 2052 returns list element at given position;
#X obj 30 2079 list.choice;
#X text 175 2079 returns random element from list;
#X obj 30 2106 list.count;
#X text 175 2106 returns the number of items that equal to specified
value;
#X obj 30 2133 list.count_if;
#X text 175 2133 returns the number of items that satisfy to external
predicate.;
#X obj 30 2170 list.deinterleave;
#X text 175 2170 splits list to N lists \, each to separate output;
#X obj 30 2197 list.delta;
#X text 175 2197 returns the difference between the current list of
floats and the previous one.;
#X obj 30 2234 list.each;
#X text 175 2234 maps each list value via external object(s);
#X obj 30 2261 list.equal;
#X text 175 2261 checks if given lists are equal;
#X obj 30 2288 list.first;
#X text 175 2288 returns first list element;
#X obj 30 2315 list.gen;
#X text 175 2315 generates list of specified length via external
generator;
#X obj 30 2342 list.integrator;
#X text 175 2342 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 2379 list.interleave;
#X text 175 2379 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 2430 list.last;
#X text 175 2430 returns last list element;
#X obj 30 2457 list.length;
#X text 175 2457 returns the number of atoms in the message;
#X obj 30 2484 list.max;
#X text 175 2484 returns largest element in the list;
#X obj 30 2511 list.mean;
#X text 175 2511 calculates average of list of floats;
#X obj 30 2538 list.min;
#X text 175 2538 returns smallest element in the list;
#X obj 30 2565 list.normalize;
#X text 175 2565 normalizes float list values to get their sum = 1.0;
#X obj 30 2592 list.product;
#X text 175 2592 calculates product of floats in list;
#X obj 30 2619 list.range;
#X text 175 2619 returns list smallest and largest value;
#X obj 30 2646 list.reduce;
#X text 175 2646 apply function of two arguments cumulatively to the
list;
#X obj 30 2673 list.resize;
#X text 175 2673 changes list size with;
#X obj 30 2700 list.reverse;
#X text 175 2700 reverses the order of the elements in the list;
#X obj 30 2727 list.seq;
#X text 175 2727 numeric sequence list generator;
#X obj 30 2754 list.shuffle;
#X text 175 2754 randomly rearranges elements in list;
#X obj 30 2781 list.sort;
#X text 175 2781 sorts list values by ascending order;
#X obj 30 2808 list.sum;
#X text 175 2808 calculates sum of floats in list;
#X obj 30 2835 list.unpack;
#X text 175 2835 sends list element one by one separately;
#X obj 30 2862 list.unwrap;
#X text 175 2862 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 2899 list.walk;
#X text 175 2899 Walks thru the list;
#X obj 30 2926 list.wrap;
#X text 175 2926 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 2977 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 3018 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3029 live.capture~;
#X text 175 3029 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 3066 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 3107 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3118 math.abs;
#X text 175 3118 absolute value function;
#X obj 30 3145 math.acos;
#X text 175 3145 arc cosine function;
#X obj 30 3172 math.acosh;
#X text 175 3172 inverse hyperbolic cosine function;
#X obj 30 3199 math.asin;
#X text 175 3199 arc sine function;
#X obj 30 3226 math.asinh;
#X text 175 3226 inverse hyperbolic sine function;
#X obj 30 3253 math.atan;
#X text 175 3253 arc tangent function;
#X obj 30 3280 math.atanh;
#X text 175 3280 inverse hyperbolic tangent function;
#X obj 30 3307 math.cbrt;
#X text 175 3307 cube root function;
#X obj 30 3334 math.ceil;
#X text 175 3334 round to smallest integral value not less than input
value;
#X obj 30 3361 math.cos;
#X text 175 3361 cosine function;
#X obj 30 3388 math.cosh;
#X text 175 3388 hyperbolic cosine function;
#X obj 30 3415 math.e;
#X text 175 3415 mathematical constant \, base of the natural
logarithm;
#X obj 30 3442 math.exp;
#X text 175 3442 exponential functions;
#X obj 30 3469 math.exp2;
#X text 175 3469 exponential functions;
#X obj 30 3496 math.floor;
#X text 175 3496 round to largest integral value not greater than x;
#X obj 30 3523 math.inf;
#X text 175 3523 infinity value that cannot be represented accurately;
#X obj 30 3550 math.log;
#X text 175 3550 logarithm functions;
#X obj 30 3577 math.log10;
#X text 175 3577 logarithm functions;
#X obj 30 3604 math.log2;
#X text 175 3604 logarithm functions;
#X obj 30 3631 math.nan;
#X text 175 3631 Not a Number \, unrepresentable value;
#X obj 30 3658 math.neg;
#X text 175 3658 negate function;
#X obj 30 3685 math.pi;
#X text 175 3685 mathematical constant;
#X obj 30 3712 math.reciprocal;
#X text 175 3712 calculate reciprocal number;
#X obj 30 3739 math.round;
#X text 175 3739 round to integral value \, regardless of rounding
direction;
#X obj 30 3766 math.sign;
#X text 175 3766 sign function;
#X obj 30 3793 math.sin;
#X text 175 3793 sine function;
#X obj 30 3820 math.sinh;
#X text 175 3820 hyperbolic sine function;
#X obj 30 3847 math.sqrt;
#X text 175 3847 square root function;
#X obj 30 3874 math.squared;
#X text 175 3874 value square;
#X obj 30 3901 math.tan;
#X text 175 3901 tangent function;
#X obj 30 3928 math.tanh;
#X text 175 3928 hyperbolic tangent function;
#X obj 30 3955 math.trunc;
#X text 175 3955 truncate to integer value;
#X obj 20 3982 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 4023 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4034 msg;
#X text 175 4034 message constructor;
#X obj 20 4061 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 4102 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4113 noise.pink~;
#X text 175 4113 Pink noise generator;
#X obj 30 4140 noise.white~;
#X text 175 4140 White noise generator;
#X obj 20 4167 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 4208 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4219 osc.impulse~;
#X text 175 4219 Bandlimited impulse train generator;
#X obj 30 4246 osc.pulse~;
#X text 175 4246 Bandlimited pulse train oscillator. ;
#X obj 30 4273 osc.saw~;
#X text 175 4273 Bandlimited saw wave oscillator;
#X obj 30 4300 osc.sinfb~;
#X text 175 4300 sine oscilator with feedback;
#X obj 30 4327 osc.square~;
#X text 175 4327 Bandlimited square wave oscillator;
#X obj 30 4354 osc.tri~;
#X text 175 4354 Bandlimited triangle wave oscillator;
#X obj 20 4381 cnv 5 47 31 empty empty pass 4 13 0 17 -262144 -49933
0;
#X obj 20 4422 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4433 pass.changed;
#X text 175 4433 rejects redundant input values;
#X obj 30 4460 pass.if;
#X text 175 4460 pass values that accepted by predicate object;
#X obj 30 4487 pass.this;
#X text 175 4487 pass only specified values;
#X obj 20 4514 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 4555 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4566 path.basename;
#X text 175 4566 outputs filename portion of pathname;
#X obj 20 4593 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 4634 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4645 is_any;
#X text 175 4645 checks if input data has *any* type;
#X obj 30 4672 is_bang;
#X text 175 4672 checks if input data has *bang* type;
#X obj 30 4699 is_even;
#X text 175 4699 checks if input number is even;
#X obj 30 4726 is_float;
#X text 175 4726 checks if input data has *float* type;
#X obj 30 4753 is_list;
#X text 175 4753 checks if input data has *list* type;
#X obj 30 4780 is_odd;
#X text 175 4780 checks if input number is odd;
#X obj 30 4807 is_pointer;
#X text 175 4807 checks if input data has *pointer* type;
#X obj 30 4834 is_symbol;
#X text 175 4834 checks if input data has *symbol* type;
#X obj 20 4861 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 4902 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4913 prop.get;
#X text 175 4913 Property extractor;
#X obj 30 4940 prop.set;
#X text 175 4940 Property injector;
#X obj 20 4967 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 5008 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5019 random.int;
#X text 175 5019 Random integer generator in specified range;
#X obj 20 5046 cnv 5 66 31 empty empty reject 4 13 0 17 -262144 -49933
0;
#X obj 20 5087 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5098 reject.if;
#X text 175 5098 reject values by predicate;
#X obj 30 5125 reject.this;
#X text 175 5125 reject only specified values;
#X obj 20 5152 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 5193 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5204 snd.file;
#X text 175 5204 Sound file loader on steroids;
#X obj 20 5231 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 5272 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5283 symbol.length;
#X text 175 5283 length of symbol (unicode supported);
#X obj 20 5310 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 5351 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5362 system.getenv;
#X text 175 5362 Get system environment variables;
#X obj 30 5389 system.hostname;
#X text 175 5389 outputs system hostname;
#X obj 30 5416 system.memsize;
#X text 175 5416 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 5453 system.memused;
#X text 175 5453 returns the process physical memory use - current and
peak;
#X obj 30 5480 system.screen_size;
#X text 175 5480 returns current screen size in pixels;
#X obj 20 5507 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 5548 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5562 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 5559 A bang... that's all;
#X obj 30 5585 ui.link @title [ui.bpfunc] @url ui.bpfunc-help.pd;
#X text 175 5582 Breakpoint function GUI object;
#X obj 30 5608 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 5605 Display GUI object;
#X obj 30 5631 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 5628 keyboard widget;
#X obj 30 5654 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 5651 knob widget;
#X obj 30 5677 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 5674 The matrix of toggles has you.;
#X obj 30 5700 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 5697 Scope GUI object;
#X obj 30 5723 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 5720 2D slider widget;
#X obj 30 5746 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 5743 Multiple slider widget;
#X obj 30 5769 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 5766 Spectroscope GUI object;
#X obj 30 5792 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 5789 modern toggle widget;
#X obj 20 5812 cnv 5 69 31 empty empty vector 4 13 0 17 -262144 -49933
0;
#X obj 20 5853 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5864 vector.distance;
#X text 175 5864 returns euclidean distance between two points;
#X obj 30 5891 vector.dot;
#X text 175 5891 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 5942 vector.length;
#X text 175 5942 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 5979 vector.normalize;
#X text 175 5979 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 6006 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 6006 version: v0.1 \, license: GPL3;
#X obj 20 6025 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;