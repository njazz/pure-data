#N canvas 0 0 600 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio\. ;
#X obj 20 101 cnv 5 38 19 empty empty data 0 17 0 17 -262144 -49933 0;
#X obj 20 130 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 141 data.fifo;
#X text 150 141 First-In-First-Out (FIFO) queue data container;
#X obj 30 168 data.list;
#X text 150 168 list container;
#X obj 20 195 cnv 5 28 19 empty empty dyn 0 17 0 17 -262144 -49933 0;
#X obj 20 224 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 235 dyn.comp2~;
#X text 150 235 stereo dynamic range compressor;
#X obj 30 262 dyn.comp~;
#X text 150 262 mono dynamic range compressors;
#X obj 30 289 dyn.gate2~;
#X text 150 289 stereo signal gate;
#X obj 30 316 dyn.gate~;
#X text 150 316 mono signal gate;
#X obj 30 343 dyn.limit2~;
#X text 150 343 stereo 1176LN Peak Limiter;
#X obj 30 370 dyn.limit~;
#X text 150 370 mono 1176LN Peak Limiter;
#X obj 30 397 dyn.softclip~;
#X text 150 397 soft signal clip;
#X obj 20 424 cnv 5 28 19 empty empty env 0 17 0 17 -262144 -49933 0;
#X obj 20 453 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 464 env.adsr~;
#X text 150 464 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 491 env.ar~;
#X text 150 491 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes)\.;
#X obj 30 528 env.follow~;
#X text 150 528 Envelope follower with independent attack and release
times\.;
#X obj 20 565 cnv 5 27 19 empty empty flt 0 17 0 17 -262144 -49933 0;
#X obj 20 594 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 605 flt.dcblock2~;
#X text 150 605 stereo DC blocker;
#X obj 30 632 flt.dcblock~;
#X text 150 632 mono DC blocker;
#X obj 30 659 flt.eq_peak~;
#X text 150 659 second order "peaking equalizer" section (gain boost
or cut near some frequency)\.  Also called a "parametric equalizer"
section\.;
#X obj 30 710 flt.highshelf~;
#X text 150 710 gain boost|cut above some frequency;
#X obj 30 737 flt.lowshelf~;
#X text 150 737 gain boost|cut below some frequency;
#X obj 20 764 cnv 5 18 19 empty empty fx 0 17 0 17 -262144 -49933 0;
#X obj 20 793 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 804 fx.pitchshift~;
#X text 150 804 simple pitch shifter based on 2 delay lines;
#X obj 20 831 cnv 5 59 19 empty empty global 0 17 0 17 -262144 -49933
0;
#X obj 20 860 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 871 global.float;
#X text 150 871 global named float object;
#X obj 30 898 global.int;
#X text 150 898 global named integer object;
#X obj 30 925 global.list;
#X text 150 925 global named list object;
#X obj 20 952 cnv 5 27 19 empty empty lfo 0 17 0 17 -262144 -49933 0;
#X obj 20 981 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 992 lfo.impulse~;
#X text 150 992 Unit-amplitude low-frequency impulse train;
#X obj 30 1019 lfo.square~;
#X text 150 1019 Positive low frequence square wave;
#X obj 30 1046 lfo.tri~;
#X text 150 1046 Positive unit-amplitude low frequency triangle wave;
#X obj 20 1073 cnv 5 37 19 empty empty list 0 17 0 17 -262144 -49933
0;
#X obj 20 1102 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1113 list.apply_to;
#X text 150 1113 modifies list value at specified position \,
filtering it via external object\.;
#X obj 30 1150 list.at;
#X text 150 1150 returns list element at given position;
#X obj 30 1177 list.choice;
#X text 150 1177 returns random element from list;
#X obj 30 1204 list.count;
#X text 150 1204 returns the number of items that equal to specified
value;
#X obj 30 1231 list.count_if;
#X text 150 1231 returns the number of items that satisfy to external
predicate\.;
#X obj 30 1268 list.deinterleave;
#X text 150 1268 splits list to N lists \, each to separate output;
#X obj 30 1295 list.delta;
#X text 150 1295 returns the difference between the current list of
floats and the previous one\.;
#X obj 30 1332 list.each;
#X text 150 1332 maps each list value via external object(s);
#X obj 30 1359 list.equal;
#X text 150 1359 checks if given lists are equal;
#X obj 30 1386 list.first;
#X text 150 1386 returns first list element;
#X obj 30 1413 list.gen;
#X text 150 1413 generates list of specified length via external
generator;
#X obj 30 1440 list.interleave;
#X text 150 1440 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc\.)\.;
#X obj 30 1491 list.last;
#X text 150 1491 returns last list element;
#X obj 30 1518 list.length;
#X text 150 1518 returns the number of atoms in the message;
#X obj 30 1545 list.max;
#X text 150 1545 returns largest element in the list;
#X obj 30 1572 list.mean;
#X text 150 1572 calculates average of list of floats;
#X obj 30 1599 list.min;
#X text 150 1599 returns smallest element in the list;
#X obj 30 1626 list.normalize;
#X text 150 1626 normalizes float list values to get their sum = 1\.0;
#X obj 30 1653 list.product;
#X text 150 1653 calculates product of floats in list;
#X obj 30 1680 list.range;
#X text 150 1680 returns list smallest and largest value;
#X obj 30 1707 list.reduce;
#X text 150 1707 apply function of two arguments cumulatively to the
list;
#X obj 30 1734 list.resize;
#X text 150 1734 changes list size with;
#X obj 30 1761 list.reverse;
#X text 150 1761 reverses the order of the elements in the list;
#X obj 30 1788 list.seq;
#X text 150 1788 numeric sequence list generator;
#X obj 30 1815 list.shuffle;
#X text 150 1815 randomly rearranges elements in list;
#X obj 30 1842 list.sort;
#X text 150 1842 sorts list values by ascending order;
#X obj 30 1869 list.sum;
#X text 150 1869 calculates sum of floats in list;
#X obj 30 1896 list.unpack;
#X text 150 1896 sends list element one by one separately;
#X obj 30 1923 list.walk;
#X text 150 1923 Walks thru the list;
#X obj 30 1950 vector.normalize;
#X text 150 1950 returns normalized vector;
#X obj 20 1977 cnv 5 38 19 empty empty live 0 17 0 17 -262144 -49933
0;
#X obj 20 2006 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2017 live.capture~;
#X text 150 2017 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 2054 cnv 5 38 19 empty empty math 0 17 0 17 -262144 -49933
0;
#X obj 20 2083 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2094 math.abs;
#X text 150 2094 absolute value function;
#X obj 30 2121 math.acos;
#X text 150 2121 arc cosine function;
#X obj 30 2148 math.acosh;
#X text 150 2148 inverse hyperbolic cosine function;
#X obj 30 2175 math.asin;
#X text 150 2175 arc sine function;
#X obj 30 2202 math.asinh;
#X text 150 2202 inverse hyperbolic sine function;
#X obj 30 2229 math.atan;
#X text 150 2229 arc tangent function;
#X obj 30 2256 math.atanh;
#X text 150 2256 inverse hyperbolic tangent function;
#X obj 30 2283 math.cbrt;
#X text 150 2283 cube root function;
#X obj 30 2310 math.ceil;
#X text 150 2310 round to smallest integral value not less than input
value;
#X obj 30 2337 math.cos;
#X text 150 2337 cosine function;
#X obj 30 2364 math.cosh;
#X text 150 2364 hyperbolic cosine function;
#X obj 30 2391 math.e;
#X text 150 2391 mathematical constant \, base of the natural
logarithm;
#X obj 30 2418 math.exp;
#X text 150 2418 exponential functions;
#X obj 30 2445 math.exp2;
#X text 150 2445 exponential functions;
#X obj 30 2472 math.floor;
#X text 150 2472 round to largest integral value not greater than x;
#X obj 30 2499 math.inf;
#X text 150 2499 infinity value that cannot be represented accurately;
#X obj 30 2526 math.log;
#X text 150 2526 logarithm functions;
#X obj 30 2553 math.log10;
#X text 150 2553 logarithm functions;
#X obj 30 2580 math.log2;
#X text 150 2580 logarithm functions;
#X obj 30 2607 math.nan;
#X text 150 2607 Not a Number \, unrepresentable value;
#X obj 30 2634 math.pi;
#X text 150 2634 mathematical constant;
#X obj 30 2661 math.round;
#X text 150 2661 round to integral value \, regardless of rounding
direction;
#X obj 30 2688 math.sin;
#X text 150 2688 sine function;
#X obj 30 2715 math.sinh;
#X text 150 2715 hyperbolic sine function;
#X obj 30 2742 math.sqrt;
#X text 150 2742 square root function;
#X obj 30 2769 math.tan;
#X text 150 2769 tangent function;
#X obj 30 2796 math.tanh;
#X text 150 2796 hyperbolic tangent function;
#X obj 30 2823 math.trunc;
#X text 150 2823 truncate to integer value;
#X obj 20 2850 cnv 5 28 19 empty empty msg 0 17 0 17 -262144 -49933 0;
#X obj 20 2879 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2890 msg;
#X text 150 2890 message constructor;
#X obj 20 2917 cnv 5 28 19 empty empty osc 0 17 0 17 -262144 -49933 0;
#X obj 20 2946 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2957 osc.impulse~;
#X text 150 2957 Bandlimited impulse train generator;
#X obj 30 2984 osc.pulse~;
#X text 150 2984 Bandlimited pulse train oscillator\. ;
#X obj 30 3011 osc.saw~;
#X text 150 3011 Bandlimited saw wave oscillator;
#X obj 30 3038 osc.sinfb~;
#X text 150 3038 sine oscilator with feedback;
#X obj 30 3065 osc.square~;
#X text 150 3065 Bandlimited square wave oscillator;
#X obj 30 3092 osc.tri~;
#X text 150 3092 Bandlimited triangle wave oscillator;
#X obj 20 3119 cnv 5 37 19 empty empty pass 0 17 0 17 -262144 -49933
0;
#X obj 20 3148 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3159 pass.changed;
#X text 150 3159 rejects redundant input values;
#X obj 30 3186 pass.if;
#X text 150 3186 pass values that accepted by predicate object;
#X obj 20 3213 cnv 5 99 19 empty empty predicates 0 17 0 17 -262144
-49933 0;
#X obj 20 3242 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3253 is_any;
#X text 150 3253 checks if input data has *any* type;
#X obj 30 3280 is_bang;
#X text 150 3280 checks if input data has *bang* type;
#X obj 30 3307 is_even;
#X text 150 3307 checks if input number is even;
#X obj 30 3334 is_float;
#X text 150 3334 checks if input data has *float* type;
#X obj 30 3361 is_list;
#X text 150 3361 checks if input data has *list* type;
#X obj 30 3388 is_odd;
#X text 150 3388 checks if input number is odd;
#X obj 30 3415 is_pointer;
#X text 150 3415 checks if input data has *pointer* type;
#X obj 30 3442 is_symbol;
#X text 150 3442 checks if input data has *symbol* type;
#X obj 20 3469 cnv 5 58 19 empty empty symbol 0 17 0 17 -262144 -49933
0;
#X obj 20 3498 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3509 symbol.length;
#X text 150 3509 length of symbol (unicode supported);
#X obj 20 3536 cnv 5 58 19 empty empty system 0 17 0 17 -262144 -49933
0;
#X obj 20 3565 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3576 system.memsize;
#X text 150 3576 returns the size of physical memory (RAM) in bytes
round to float data type\.;
#X obj 30 3613 system.memused;
#X text 150 3613 returns the process physical memory use - current and
peak;
#X obj 20 3640 cnv 5 59 19 empty empty vector 0 17 0 17 -262144 -49933
0;
#X obj 20 3669 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3680 vector.distance;
#X text 150 3680 returns euclidean distance between two points;
#X obj 30 3707 vector.dot;
#X text 150 3707 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied)\.;
#X obj 30 3758 vector.length;
#X text 150 3758 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + \.\.\.element(n)^2)\.;
#X obj 1 1 cnv 5 597 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 3795 cnv 5 597 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 3795 version: v0\.1 \, license: GPL3;
#X obj 20 3811 pddp/pddplink https://github.com/uliss/pure-data -text
https://github.com/uliss/pure-data;